<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd  " 
		default-lazy-init="false">
	
	<aop:aspectj-autoproxy />
	<context:annotation-config />
    <context:property-placeholder location="classpath:db.properties,classpath:common.properties,classpath:web.properties,classpath:es.properties" />
    <!--  <bean class="cn.candyfilm.web.configures.EncryptPropertyPlaceholderConfigurer" p:fileEncoding="utf-8">
        <property name="locations">  
            <list>
        	<value>classpath:db.properties</value>
        	<value>classpath:common.properties</value>
        	<value>classpath:web.properties</value>
        	</list>
        </property>
    </bean>  -->
	<context:component-scan base-package="com.ikan">
		<context:exclude-filter type="aspectj"
			expression="com.ikan.mall.web.controller..*" />
	</context:component-scan>
	<bean id="auditInterceptor" class="com.ikan.core.dao.audit.AuditInterceptor"/>
	

	<bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath*:web.properties</value>
                <value>classpath*:db.properties</value>
                <value>classpath*:common.properties</value>
                <value>classpath*:es.properties</value>
            </list>
        </property>
    </bean>
    
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="properties" ref="configProperties" />
    </bean>
    
	<bean id="jacksonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">    
            <list>    
                  <value>text/html;charset=UTF-8</value>    
            </list>    
        </property>  
    </bean>
    
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
		  <list>
		    <ref bean="jacksonMessageConverter"/>
		  </list>
		</property>
	</bean>
	
	

	<bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
		<property name="driverClass" value="${boneCP.driverClassName}" />
		<property name="jdbcUrl" value="${boneCP.url}" />
		<property name="username" value="${boneCP.username}" />
		<property name="password" value="${boneCP.password}" />
		<property name="idleConnectionTestPeriodInMinutes" value="240" />
		<property name="idleMaxAgeInMinutes" value="60" />
		<property name="maxConnectionsPerPartition" value="10" />
		<property name="minConnectionsPerPartition" value="5" />
		<property name="partitionCount" value="2" />
		<property name="acquireIncrement" value="5" />
		<property name="statementsCacheSize" value="10" />
		<property name="releaseHelperThreads" value="1" />
		<property name="maxConnectionAgeInSeconds" value="120" />
	</bean>
	
		<bean id="logDataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
		<property name="driverClass" value="${boneCP.driverClassName}" />
		<property name="jdbcUrl" value="jdbc:mysql://172.16.2.31:3306/ytsplog?useUnicode=true&amp;characterEncoding=UTF-8" />
		<property name="username" value="${boneCP.username}" />
		<property name="password" value="${boneCP.password}" />
		<property name="idleConnectionTestPeriodInMinutes" value="240" />
		<property name="idleMaxAgeInMinutes" value="60" />
		<property name="maxConnectionsPerPartition" value="10" />
		<property name="minConnectionsPerPartition" value="5" />
		<property name="partitionCount" value="2" />
		<property name="acquireIncrement" value="5" />
		<property name="statementsCacheSize" value="10" />
		<property name="releaseHelperThreads" value="1" />
		<property name="maxConnectionAgeInSeconds" value="120" />
	</bean>

	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
				<prop key="hibernate.max_fetch_depth">0</prop>
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.ikan.core</value>
			</list>
		</property>
		<!--newAdd-->
		<property name="entityInterceptor">  
            <ref bean="auditInterceptor"/>  
        </property>
        <!--newAdd-->
	</bean>
	
		<bean id="logSessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="logDataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
				<prop key="hibernate.max_fetch_depth">0</prop>
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.ikan.statistic</value>
			</list>
		</property>
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	

	<!-- 通过@Transactional注解定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory" />
		<!-- <property name="cacheQueries" value="true" /> -->
	</bean>
	
	<bean id="logHibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="logSessionFactory" />
		<!-- <property name="cacheQueries" value="true" /> -->
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="logJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="logDataSource" />
	</bean>


	<bean name="openSessionInViewInterceptor" 
			class="org.springframework.orm.hibernate3.support.OpenSessionInViewInterceptor"> 
		<property name="sessionFactory"> 
			<ref bean="sessionFactory"/> 
		</property> 
	</bean>
	
	<task:executor id="executor" pool-size="10" />  
    <task:scheduler id="scheduler" pool-size="20" />  
    <task:annotation-driven executor="executor" scheduler="scheduler" />
	 <!-- <task:scheduled-tasks>  
    	<task:scheduled ref="indexQuartz" method="startIndex" cron="0 0/5 * * * ?"/>
	</task:scheduled-tasks>    -->
	
	<mongo:mongo id="mongo" host="${mongo.datasource.host}" port="${mongo.datasource.port}">  
        <mongo:options connections-per-host="10"  
            threads-allowed-to-block-for-connection-multiplier="10"  
            auto-connect-retry="true" />  
    </mongo:mongo>  
  
  
    <!-- Spring提供的mongodb操作模板-->  
    <bean id="mongoTemplate"  
        class="org.springframework.data.mongodb.core.MongoTemplate">  
        <constructor-arg ref="mongo" />  
        <constructor-arg name="databaseName" value="${mongo.datasource.dbname}" />  
    </bean>  
    
     <!--  <bean id="storageLogQuartz" class="com.ikan.search.quartz.StorageLogQuartz">  </bean>
	  <bean id="invokeJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">  
		  	<property name="targetObject">  
		      	<ref bean="storageLogQuartz" /> 目标Job  
		   </property>  
		    <property name="targetMethod">  
		        <value>startIndex</value> 目标方法  
		   </property>  
		    <property name="concurrent">  
		       <value>false</value> 设置是否同步  
		    </property>  
	</bean>  
	<bean id="jobServiceCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">  
		 <property name="jobDetail" ref="invokeJob" />  
	    <property name="cronExpression" value="0 0/1 * * * ?"  />  
	</bean>  
	
	<bean id="schedulerFactory" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">  
      <property name="triggers">  
	        <list>  
	            <ref local="jobServiceCronTrigger"/>  
	        </list>  
	   </property>  
	</bean>  -->


	<!--newAdd-->
		 <!-- Activemq connection factory -->
<!-- 	  <bean id="amqConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
	         <constructor-arg index="0" value="${jms.broker.url}"/>
	        <property name="brokerURL" value="tcp://172.16.218.11:61616"/>  
	    </bean>  -->
	<!--newAdd-->
		 <!-- Activemq connection factory -->
	    <bean id="amqConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
	         <!--<constructor-arg index="0" value="${jms.broker.url}"/>-->
	        <property name="brokerURL" value="tcp://172.16.218.11:61616"/>  
	    </bean>
	    
	    
 	<bean id="connectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
        <constructor-arg ref="amqConnectionFactory"/>
       <property name="targetConnectionFactory" ref="amqConnectionFactory"/>  
     <!--    Session缓存数量,这里属性也可以直接在这里配置   -->
      <property name="sessionCacheSize" value="100" />  
    </bean>
    
    <!-- JmsTemplate Definition -->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <!-- <property name="defaultDestination" ref="defaultDestination"/> -->
        <property name="defaultDestinationName" value="IKAN.AUDIT"/>
    </bean>
   <!--newAdd-->
</beans>